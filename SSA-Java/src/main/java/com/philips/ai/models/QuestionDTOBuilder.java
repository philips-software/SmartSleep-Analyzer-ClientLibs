/*
 * SmartSleepAnalyzer
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
package com.philips.ai.models;

import java.util.*;

public class QuestionDTOBuilder {
    //the instance to build
    private QuestionDTO questionDTO;

    /**
     * Default constructor to initialize the instance
     */
    public QuestionDTOBuilder() {
        questionDTO = new QuestionDTO();
    }

    /**
     * The identifier of the question.
     */
    public QuestionDTOBuilder identifier(String identifier) {
        questionDTO.setIdentifier(identifier);
        return this;
    }

    /**
     * The displayable text of the question.
     */
    public QuestionDTOBuilder text(String text) {
        questionDTO.setText(text);
        return this;
    }

    /**
     * Additional content to display with the question text.
     */
    public QuestionDTOBuilder content(String content) {
        questionDTO.setContent(content);
        return this;
    }

    /**
     * An identifier indicating the type of the question.
     */
    public QuestionDTOBuilder type(String type) {
        questionDTO.setType(type);
        return this;
    }

    /**
     * An initial value to apply to the question, if no value is yet provided.
     */
    public QuestionDTOBuilder initialValue(String initialValue) {
        questionDTO.setInitialValue(initialValue);
        return this;
    }

    /**
     * A min constraint which can be used with numeric type questions.
     */
    public QuestionDTOBuilder min(Integer min) {
        questionDTO.setMin(min);
        return this;
    }

    /**
     * Custom message to show for min constraint violation.
     */
    public QuestionDTOBuilder minValidationMessage(String minValidationMessage) {
        questionDTO.setMinValidationMessage(minValidationMessage);
        return this;
    }

    /**
     * A max constraint which can be used with numeric type questions.
     */
    public QuestionDTOBuilder max(Integer max) {
        questionDTO.setMax(max);
        return this;
    }

    /**
     * Custom message to show for max constraint violation.
     */
    public QuestionDTOBuilder maxValidationMessage(String maxValidationMessage) {
        questionDTO.setMaxValidationMessage(maxValidationMessage);
        return this;
    }

    /**
     * Custom message to show for format constraint violation.
     */
    public QuestionDTOBuilder formatValidationMessage(String formatValidationMessage) {
        questionDTO.setFormatValidationMessage(formatValidationMessage);
        return this;
    }

    /**
     * Conversion identifier indicating the client should convert the unit(s) of the value when generating the question
     * (ie. metric to imperial).
     */
    public QuestionDTOBuilder conversion(String conversion) {
        questionDTO.setConversion(conversion);
        return this;
    }

    /**
     * Text to show beside an input indicating to the end-user which units are required.
     */
    public QuestionDTOBuilder unitsText(String unitsText) {
        questionDTO.setUnitsText(unitsText);
        return this;
    }

    /**
     * Used for multi-select questions, indicating that this multi-select cannot be answered in conjunction with any other
     * on the page. A good example is "None of the above".
     */
    public QuestionDTOBuilder standalone(Boolean standalone) {
        questionDTO.setStandalone(standalone);
        return this;
    }

    /**
     * List of options to be used with selection based questions.
     */
    public QuestionDTOBuilder options(List<OptionDTO> options) {
        questionDTO.setOptions(options);
        return this;
    }

    /**
     * Placeholder text to be shown in the question's input when no value is present.
     */
    public QuestionDTOBuilder placeholder(String placeholder) {
        questionDTO.setPlaceholder(placeholder);
        return this;
    }

    /**
     * Indicates whether the question is optional.
     */
    public QuestionDTOBuilder optional(Boolean optional) {
        questionDTO.setOptional(optional);
        return this;
    }

    /**
     * Custom label to show on the high value end of likert questions.
     */
    public QuestionDTOBuilder likertTextLow(String likertTextLow) {
        questionDTO.setLikertTextLow(likertTextLow);
        return this;
    }

    /**
     * Custom label to show on the low value end of likert questions.
     */
    public QuestionDTOBuilder likertTextHigh(String likertTextHigh) {
        questionDTO.setLikertTextHigh(likertTextHigh);
        return this;
    }
    
    /**
     * Custom label to show on the low value end of likert questions.
     */
    public QuestionDTOBuilder heading(String heading) {
        questionDTO.setHeading(heading);
        return this;
    }
    /**
     * Build the instance with the given values
     */
    public QuestionDTO build() {
        return questionDTO;
    }
}
